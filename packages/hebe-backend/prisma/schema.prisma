generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  phone     String?
  firstName String?
  lastName  String?
  address   String?

  comments ProductComments[]
  orders   Orders[]
  cart     Cart[]
  roles    Role              @default(USER)
}

model Products {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productName        String
  productDescription String
  productPrice       Decimal @db.Money
  productImg         String
  brandsId           Int?
  views              Int     @default(0)

  brand    Brands?           @relation(fields: [brandsId], references: [id])
  comments ProductComments[] //
  category Category[]
  tags     Tags[]
  cart     Cart[]
}

model Orders {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //for delivery status later

  userId          String
  name            String
  phone           String
  phone2          String?
  shippingAddress String
  paynmentId      String
  status          Boolean @default(false)
  products        Json
  totalAmount     Decimal
  user            Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product         Products[]
  productQuantity Int        @default(1)

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products Products[]
}

model Brands {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products Products[]
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model ProductComments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  feedback  String  @db.Text
  userId    String?
  productId String?

  user    Users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Tags {
  id       Int        @id @default(autoincrement())
  tagName  String     @unique
  Products Products[]
}
